/*************/
/* Based on a template by Oren Ish-Shalom */
/*************/


/*************/
/* IMPORTS */
/*************/

import java_cup.runtime.*;
import ast.*;
import java.util.List;
import java.util.LinkedList;

parser code
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	// Override default error reporting in parser
	public void report_error(String message, Object info)
	{
	    System.err.print("Syntax error at line " + lexer.getLine() + " of input. Parser\n");
		System.exit(1);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    try {
	s = lexer.next_token();
	// System.out.print(s.sym);
	// System.out.print("[");
	// System.out.print(lexer.getLine());
	// System.out.print(":");
	// System.out.print(lexer.getCharPos());
	// System.out.print("] ");
	// System.out.print(sym.terminalNames[s.sym]);
	// if (s.value != null)
	// {
	//	System.out.print("( ");
	//	System.out.print(s.value);
	//	System.out.print(" )");
	// }
	// System.out.print("\n");
	return s;
     } catch (java.lang.Error e) {
         System.err.print("Syntax error at line " + lexer.getLine() + " of input. Lexer\n");
         System.exit(1);
         return null;
     }
:};

/*************/
/* TERMINALS */
/*************/
terminal String IDENTIFIER;

//Literals
terminal Integer INTEGER_LITERAL;
terminal TRUE;
terminal FALSE;
// -------

//Meta language
terminal LBRACE;
terminal RBRACE;
terminal LBRACKET;
terminal RBRACKET;
terminal LPAREN;
terminal RPAREN;
terminal SEMICOLON;
terminal COMMA;
terminal EQUALS;
terminal DOT;
terminal EXCLAMATION;
//-----

// Binary Operators

terminal LESSTHAN;
terminal AND;
terminal PLUS;
terminal MINUS;
terminal MULT;

//-----

//Class related
terminal CLASS;
terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal MAIN;
terminal NEW;
terminal THIS;
terminal EXTENDS;
terminal STRING;

// ----

// Control Flow
terminal IF;
terminal ELSE;
terminal WHILE;

// ---

// Types and methods
terminal RETURN;
terminal BOOLEAN;
terminal INTEGER;
terminal PRINT;
terminal LENGTH;

// ---




/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program prog;
non terminal MainClass MainClass;
non terminal List<ClassDecl> ClassDecl;
non terminal List<VarDecl> VarDecl;
non terminal List<MethodDecl> MethodDecl;
non terminal AstType type;
non terminal List<FormalArg> Formals;
non terminal List<FormalArg> OtherFormals;
non terminal List<Statement> Statements;
non terminal Expr Expression;
non terminal List<Expr> ExpressionList;
non terminal List<Expr> OtherExpressions;


non terminal Statement statement;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS, MINUS;
precedence left MULT;
precedence left LESSTHAN, AND;
precedence left EXCLAMATION;
precedence left DOT;

/************************/
/* INITIAL NON TERMINAL */
/************************/
start with prog;

/********************/
/* PRODUCTION RULES */
/********************/

prog  ::=   MainClass:m ClassDecl:c
            {:
               RESULT = new Program(m, c);
            :};

MainClass ::= CLASS IDENTIFIER:className LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENTIFIER:argsName RPAREN LBRACE statement:body RBRACE RBRACE
			{:
				RESULT = new MainClass(className, argsName, body);
			:};

ClassDecl ::= ClassDecl:classes CLASS IDENTIFIER:className LBRACE VarDecl:vars MethodDecl:methods RBRACE
				{:
				    if(classes == null) classes  = new LinkedList<ClassDecl>();
				    classes .add(new ClassDecl(className,null,vars,methods));
					RESULT = classes;
				:}
			| ClassDecl:classes CLASS IDENTIFIER:className EXTENDS IDENTIFIER:superName LBRACE VarDecl:vars MethodDecl:methods RBRACE
				{:
					if(classes==null) classes = new LinkedList<ClassDecl>();
                    classes.add(new ClassDecl(className,superName,vars,methods));
                    RESULT = classes;
				:}
			|	{:
			  		RESULT = new LinkedList<ClassDecl>();
				:};







MethodDecl ::=	MethodDecl:methods PUBLIC type:returnType IDENTIFIER:methodName LPAREN Formals:formalArgs RPAREN LBRACE VarDecl:vars Statements:body RETURN Expression:returnedExp SEMICOLON RBRACE
				{:
					if (methods == null) methods = new LinkedList<MethodDecl>();
					MethodDecl m = new MethodDecl(returnType, methodName, formalArgs, vars, body, returnedExp, lexer.getLine());
					methods.add(m);
					RESULT = methods;
				:}
			|
				{:
					RESULT = new LinkedList<MethodDecl>();
				:};


Formals ::= type:type IDENTIFIER:name OtherFormals:others
				{:
					LinkedList<FormalArg> fl = new LinkedList<>();
					fl.add(new FormalArg(type, name, lexer.getLine()));
					if (others != null && others.size() > 0) {
						for (var otherFormal:others) {
							fl.add(otherFormal);
						}
					}
					RESULT = fl;
				:}
			|
				{:
					RESULT = new LinkedList<FormalArg>();
				:};


OtherFormals ::= OtherFormals:others COMMA type:type IDENTIFIER:name
				{:
					if (others == null) others = new LinkedList<FormalArg>();
					others.add(new FormalArg(type, name, lexer.getLine()));
					RESULT = others;
				:}
			|
				{:
					RESULT = new LinkedList<FormalArg>();
				:};

VarDecl ::= VarDecl:vars type:varType IDENTIFIER:varName SEMICOLON
				{:
					VarDecl newVar = new VarDecl(varType, varName, lexer.getLine());
					if (vars == null) vars = new LinkedList<VarDecl>();
					vars.add(newVar);
					RESULT = vars;
				:}
			|
				{:
					RESULT = new LinkedList<VarDecl>();
				:};


type ::= INTEGER LBRACKET RBRACKET
			{:
				RESULT = new IntArrayAstType();
			:}
		|
		  BOOLEAN
		  	{:
		  		RESULT = new BoolAstType();
		  	:}
		|
		  INTEGER
		  	{:
		  		RESULT = new IntAstType();
		  	:}
		|
		  IDENTIFIER:className
		  	{:
		  		RESULT = new RefType(className);
		  	:};
		  	

Statements ::= statement:newStatement Statements:existingStatements
					{:
						LinkedList<Statement> updatedStatements = new LinkedList<>();
						updatedStatements.add(newStatement);
						if (existingStatements != null && existingStatements.size() > 0) {
							for (var statement: existingStatements) {
								updatedStatements.add(statement);
							}
						}
						RESULT = updatedStatements;
					:}
				|
					{:
						RESULT = new LinkedList<Statement>();
					:};

statement ::= LBRACE Statements:statementList RBRACE
				{:
					BlockStatement b = new BlockStatement(statementList);
					RESULT = b;
				:}
			|
			  IF LPAREN Expression:cond RPAREN statement:thenCase ELSE statement:elseCase
			  {:
			  		IfStatement if_expr = new IfStatement(cond,thenCase,elseCase);
			  		RESULT = if_expr;
			  :}
			|
			  WHILE LPAREN Expression:cond RPAREN statement:body
			  {:
					WhileStatement while_expr = new WhileStatement(cond, body);
					RESULT = while_expr;
			  :}
			|
			  PRINT LPAREN Expression:arg RPAREN SEMICOLON
			  {:
			  		var print_expr = new SysoutStatement(arg);
			  		RESULT = print_expr;
			  :}

			|
			  IDENTIFIER:lv EQUALS Expression:rv SEMICOLON
			  {:
			  		var assignment = new AssignStatement(lv, rv);
			  		RESULT = assignment;
			  :}
			|
			  IDENTIFIER:arrayName LBRACKET Expression:indexExpr RBRACKET EQUALS Expression:rv SEMICOLON
			  {:
			  		var ArrayAssignment = new AssignArrayStatement(arrayName, indexExpr, rv);
			  		RESULT = ArrayAssignment;
			  :};


Expression ::= Expression:e1 AND Expression:e2
			{: RESULT = new AndExpr(e1, e2); :}
		| Expression:e1 PLUS Expression:e2
			{: RESULT = new AddExpr(e1, e2); :}
		| Expression:e1 MINUS Expression:e2
			{: RESULT = new SubtractExpr(e1, e2); :}
		| Expression:e1 MULT Expression:e2
			{: RESULT = new MultExpr(e1, e2); :}
		| Expression:e1 LESSTHAN Expression:e2
			{: RESULT = new LtExpr(e1, e2); :}
		| Expression:arrayName LBRACKET Expression:indexExpr RBRACKET
			{: RESULT = new ArrayAccessExpr(arrayName, indexExpr); :}
		| Expression:arrayName DOT LENGTH
			{: RESULT = new ArrayLengthExpr(arrayName); :}
		| Expression:owner DOT IDENTIFIER:methodName LPAREN ExpressionList:args RPAREN
			{: RESULT = new MethodCallExpr(owner, methodName, args); :}
		| INTEGER_LITERAL:num
			{: RESULT = new IntegerLiteralExpr(num); :}
		| TRUE
			{: RESULT = new TrueExpr(); :}
		| FALSE
			{: RESULT = new FalseExpr(); :}
		| IDENTIFIER:i
			{: RESULT = new IdentifierExpr(i); :}
		| THIS
			{: RESULT = new ThisExpr(); :}
		| NEW INTEGER LBRACKET Expression:lengthExpr RBRACKET
			{: RESULT = new NewIntArrayExpr(lengthExpr); :}
		| NEW IDENTIFIER:className LPAREN RPAREN
			{: RESULT = new NewObjectExpr(className); :}
		| EXCLAMATION Expression:e
			{: RESULT = new NotExpr(e); :}
		| LPAREN Expression:e RPAREN
			{: RESULT = e; :};


ExpressionList::= Expression:e OtherExpressions:others
				{:
					var expressions = new LinkedList<Expr>();
					expressions.add(e);
					if (others != null && others.size() > 0) {
						for (var otherExp : others){
							expressions.add(otherExp);
						}
					}
					RESULT = expressions;
				:}
			|
				{:
					RESULT = new LinkedList<Expr>();
				:};


OtherExpressions ::= OtherExpressions:others COMMA Expression:e
				{:
					if (others == null) others = new LinkedList<Expr>();
					others.add(e);
					RESULT = others;
				:}
			|
				{:
					RESULT = new LinkedList<Expr>();
				:}
		;